import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.temporal.ChronoUnit

import org.ajoberstar.grgit.Commit

apply plugin: 'groovy'
apply plugin: 'eclipse'
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:${grgitVersion}"
        classpath "com.gradle.publish:plugin-publish-plugin:${gradlePublishPluginVersion}"
    }
}
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.gradle.plugin-publish'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile "org.ajoberstar:gradle-git:${grgitVersion}"
    compile "org.jboss.apiviz:apiviz:${apivizVersion}"
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext {
    def vfile = new File("${projectDir}/version.info")
    try {
        def currentSha = grgit.head().id
        def branchMap = [:]
        /*
         * Check if it is a tagged version
         */
        def tags = grgit.tag.list()
        def tag = tags.find() { it.commit.id == currentSha }
        def commitId = grgit.head().abbreviatedId
        def ZonedDateTime date = ZonedDateTime.ofInstant(grgit.head().date.toInstant(), ZoneOffset.UTC)
        def firstCommit = ZonedDateTime.ofInstant(grgit.log().last().date.toInstant(), ZoneOffset.UTC)
        def dateId = Long.toString(ChronoUnit.DAYS.between(firstCommit, date), Character.MAX_RADIX)
        while (dateId.length() < 3) { dateId = "0${dateId}" }
        if (tag == null) {
            project.version = "${project.version}+${dateId}.${commitId}".take(20)
        } else if (tag.name == project.version){
            println "This is tagged as the official version ${project.version}"
        } else {
            project.version = "${project.version}-${tag.name}-${commitId}".take(20)
        }
        println "Due to your git repo status, the project version is detected as ${project.version}"
        vfile.text = project.version
    } catch (Exception ex) {
        ex.printStackTrace()
        println("No Git repository info available, falling back to file")
        if (vfile.exists()) {
            println("No version file, using project version variable as-is")
            version = vfile.text
        }
    }
}


jar {
    baseName "$artifactId"
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}

wrapper { gradleVersion = gradleVersionToUse }

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName "$artifactId"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName "$artifactId"
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

pluginBundle {
    website = 'https://github.com/DanySK/build-commons'
    vcsUrl = 'https://github.com/DanySK/build-commons'
    description = 'A rich build configuration, shareable across projects'
    tags = ['pre-configuration', 'configuration', 'javadoc', 'jar', 'pmd', 'findbugs', 'checkstyle']

    plugins {
        buildcommonsPlugin {
            id = 'org.danilopianini.build-commons'
            displayName = 'build-commons'
        }
    }
}

apply plugin: 'signing'

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = projectDescription
                packaging = 'jar'
                url = "$scmRootUrl/$artifactId".toString()
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                developers {
                    developer {
                            name = 'Danilo Pianini'
                            email = 'danilo.pianini@gmail.com'
                            url = 'http://www.danilopianini.org/'
                    }
                }
                scm {
                    url = "$scmRootUrl/$artifactId".toString()
                    connection = "$scmType:$scmLogin/$scmRepoName".toString()
                    developerConnection = "$scmType:$scmLogin/$scmRepoName".toString()
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.main
}

tasks.withType(Sign) {
    onlyIf { Boolean.parseBoolean(signArchivesIsEnabled) }
}

defaultTasks 'clean', 'build', 'check', 'assemble', 'install', 'javadoc'
